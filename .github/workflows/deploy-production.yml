name: Release

on:
  release:
    types: [ released ]

jobs:
  build:
    name: Build distribution
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install pypa/build
        run: python3 -m pip install build --user
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install .
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

  publish:
    name: publish to pypi
    needs:
      - build
    runs-on: ubuntu-latest

    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  build_push:
    name: Build And Push DockerImage
    needs:
      - publish
    runs-on: ubuntu-latest
    environment: production

    permissions:
      id-token: write

    env:
      REPOSITORY: "quollio-core-universal"

    steps:
      # Initialize
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.ref }}

      - uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-assume-role
          role-session-name: github-actions-assume-role
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: get latest tag
        run: |
          LIB_VERSION=$(echo ${GITHUB_REF##*/} | sed 's/^v//')
          echo ${LIB_VERSION} is used as module version.
          echo "QUOLLIO_CORE_LATEST_VERSION=$LIB_VERSION" >> $GITHUB_ENV

          CONTAINER_VERSION=$(echo ${GITHUB_REF##*/} | sed -E 's/^(v[0-9]+\.[0-9]+).*/\1/')
          echo ${CONTAINER_VERSION} is used as image tag.
          echo "CONTAINER_LATEST_VERSION=$CONTAINER_VERSION" >> $GITHUB_ENV

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platform: linux/amd64
          push: true
          tags: ${{ format('{0}/{1}:latest', steps.login-ecr.outputs.registry, env.REPOSITORY) }},${{ format('{0}/{1}:{2}', steps.login-ecr.outputs.registry, env.REPOSITORY, env.CONTAINER_LATEST_VERSION) }}
          build-args: |
            LIB_VERSION=${{ env.QUOLLIO_CORE_LATEST_VERSION }}
